// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/wetor/AnimeGo/internal/animego/anisource"
	"github.com/wetor/AnimeGo/internal/animego/anisource/bangumi"
	"github.com/wetor/AnimeGo/internal/animego/anisource/mikan"
	"github.com/wetor/AnimeGo/internal/animego/anisource/themoviedb"
	"github.com/wetor/AnimeGo/internal/animego/clientnotifier"
	"github.com/wetor/AnimeGo/internal/animego/database"
	"github.com/wetor/AnimeGo/internal/animego/downloader"
	"github.com/wetor/AnimeGo/internal/animego/filter"
	"github.com/wetor/AnimeGo/internal/animego/parser"
	"github.com/wetor/AnimeGo/internal/animego/renamer"
	"github.com/wetor/AnimeGo/internal/api"
	"github.com/wetor/AnimeGo/internal/client"
	"github.com/wetor/AnimeGo/internal/client/qbittorrent"
	"github.com/wetor/AnimeGo/internal/client/transmission"
	"github.com/wetor/AnimeGo/internal/models"
)

// Injectors from anisource.go:

func GetMikanData(opts *mikan.Options) *mikan.Mikan {
	mikanMikan := mikan.NewMikan(opts)
	return mikanMikan
}

func GetBangumiData(opts *bangumi.Options) *bangumi.Bangumi {
	bangumiBangumi := bangumi.NewBangumi(opts)
	return bangumiBangumi
}

func GetThemoviedbData(opts *themoviedb.Options) *themoviedb.Themoviedb {
	themoviedbThemoviedb := themoviedb.NewThemoviedb(opts)
	return themoviedbThemoviedb
}

func GetMikan(mikanOpts *mikan.Options, bgmOpts *bangumi.Options, tmdbOpts *themoviedb.Options) *anisource.Mikan {
	mikanMikan := mikan.NewMikan(mikanOpts)
	bangumiBangumi := bangumi.NewBangumi(bgmOpts)
	themoviedbThemoviedb := themoviedb.NewThemoviedb(tmdbOpts)
	anisourceBangumi := anisource.NewBangumiSource(bangumiBangumi, themoviedbThemoviedb)
	anisourceMikan := anisource.NewMikanSource(mikanMikan, anisourceBangumi)
	return anisourceMikan
}

func GetBangumi(bgmOpts *bangumi.Options, tmdbOpts *themoviedb.Options) *anisource.Bangumi {
	bangumiBangumi := bangumi.NewBangumi(bgmOpts)
	themoviedbThemoviedb := themoviedb.NewThemoviedb(tmdbOpts)
	anisourceBangumi := anisource.NewBangumiSource(bangumiBangumi, themoviedbThemoviedb)
	return anisourceBangumi
}

// Injectors from client.go:

func GetClient(name string, opts *models.ClientOptions, cache api.Cacher) api.Client {
	apiClient := client.NewClient(name, opts, cache)
	return apiClient
}

func GetQBittorrent(opts *models.ClientOptions) *qbittorrent.QBittorrent {
	qBittorrent := qbittorrent.NewQBittorrent(opts)
	return qBittorrent
}

func GetTransmission(opts *models.ClientOptions, cache api.Cacher) *transmission.Transmission {
	transmissionTransmission := transmission.NewTransmission(opts, cache)
	return transmissionTransmission
}

// Injectors from database.go:

func GetDatabase(opts *models.DatabaseOptions, cache api.Cacher) (*database.Database, error) {
	databaseDatabase, err := database.NewDatabase(opts, cache)
	if err != nil {
		return nil, err
	}
	return databaseDatabase, nil
}

// Injectors from downloader.go:

func GetDownloader(opts *models.DownloaderOptions, client2 api.Client, notifyOpts *models.NotifierOptions, db *database.Database, rename api.Renamer) *downloader.Manager {
	notifier := clientnotifier.NewNotifier(notifyOpts, db, rename)
	manager := downloader.NewManager(opts, client2, notifier)
	return manager
}

// Injectors from filter.go:

func GetFilter(opts *models.FilterOptions, manager api.ManagerDownloader, parserOpts *models.ParserOptions, plugin *models.Plugin, mikanOpts *mikan.Options, bgmOpts *bangumi.Options, tmdbOpts *themoviedb.Options) *filter.Manager {
	parserParser := parser.NewParserPlugin(plugin)
	mikanMikan := mikan.NewMikan(mikanOpts)
	bangumiBangumi := bangumi.NewBangumi(bgmOpts)
	themoviedbThemoviedb := themoviedb.NewThemoviedb(tmdbOpts)
	anisourceBangumi := anisource.NewBangumiSource(bangumiBangumi, themoviedbThemoviedb)
	anisourceMikan := anisource.NewMikanSource(mikanMikan, anisourceBangumi)
	parserManager := parser.NewManager(parserOpts, parserParser, anisourceMikan, anisourceBangumi)
	filterManager := filter.NewManager(opts, manager, parserManager)
	return filterManager
}

// Injectors from renamer.go:

func GetRenamePlugin(plugin *models.Plugin) *renamer.Rename {
	rename := renamer.NewRenamePlugin(plugin)
	return rename
}

func GetRenamer(options *models.RenamerOptions, plugin *models.Plugin) *renamer.Manager {
	rename := renamer.NewRenamePlugin(plugin)
	manager := renamer.NewManager(options, rename)
	return manager
}
