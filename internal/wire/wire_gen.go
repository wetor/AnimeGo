// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/wetor/AnimeGo/internal/animego/anisource"
	"github.com/wetor/AnimeGo/internal/animego/anisource/bangumi"
	"github.com/wetor/AnimeGo/internal/animego/anisource/mikan"
	"github.com/wetor/AnimeGo/internal/animego/anisource/themoviedb"
	"github.com/wetor/AnimeGo/internal/api"
	"github.com/wetor/AnimeGo/internal/client"
	"github.com/wetor/AnimeGo/internal/client/qbittorrent"
	"github.com/wetor/AnimeGo/internal/client/transmission"
	"github.com/wetor/AnimeGo/internal/models"
)

// Injectors from anisource.go:

func GetMikanData(opts *mikan.Options) *mikan.Mikan {
	mikanMikan := mikan.NewMikan(opts)
	return mikanMikan
}

func GetBangumiData(opts *bangumi.Options) *bangumi.Bangumi {
	bangumiBangumi := bangumi.NewBangumi(opts)
	return bangumiBangumi
}

func GetThemoviedbData(opts *themoviedb.Options) *themoviedb.Themoviedb {
	themoviedbThemoviedb := themoviedb.NewThemoviedb(opts)
	return themoviedbThemoviedb
}

func GetMikan(mikanOpts *mikan.Options, bgmOpts *bangumi.Options, tmdbOpts *themoviedb.Options) *anisource.Mikan {
	mikanMikan := mikan.NewMikan(mikanOpts)
	bangumiBangumi := bangumi.NewBangumi(bgmOpts)
	themoviedbThemoviedb := themoviedb.NewThemoviedb(tmdbOpts)
	anisourceBangumi := anisource.NewBangumiSource(bangumiBangumi, themoviedbThemoviedb)
	anisourceMikan := anisource.NewMikanSource(mikanMikan, anisourceBangumi)
	return anisourceMikan
}

func GetBangumi(bgmOpts *bangumi.Options, tmdbOpts *themoviedb.Options) *anisource.Bangumi {
	bangumiBangumi := bangumi.NewBangumi(bgmOpts)
	themoviedbThemoviedb := themoviedb.NewThemoviedb(tmdbOpts)
	anisourceBangumi := anisource.NewBangumiSource(bangumiBangumi, themoviedbThemoviedb)
	return anisourceBangumi
}

// Injectors from client.go:

func GetClient(name string, opts *models.ClientOptions) api.Client {
	apiClient := client.NewClient(name, opts)
	return apiClient
}

func GetQBittorrent(opts *models.ClientOptions) *qbittorrent.QBittorrent {
	qBittorrent := qbittorrent.NewQBittorrent(opts)
	return qBittorrent
}

func GetTransmission(opts *models.ClientOptions) *transmission.Transmission {
	transmissionTransmission := transmission.NewTransmission(opts)
	return transmissionTransmission
}
